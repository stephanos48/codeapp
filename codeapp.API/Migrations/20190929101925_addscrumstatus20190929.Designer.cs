// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using codeapp.API.Data;

namespace codeapp.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190929101925_addscrumstatus20190929")]
    partial class addscrumstatus20190929
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("codeapp.API.Models.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActualAuditEndDate");

                    b.Property<DateTime>("ActualAuditStartDate");

                    b.Property<string>("AuditName");

                    b.Property<string>("AuditNo");

                    b.Property<string>("AuditReason");

                    b.Property<string>("AuditScope");

                    b.Property<string>("AuditSummary");

                    b.Property<int>("AuditTypeId");

                    b.Property<string>("Auditors");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("PlannedAuditEndDate");

                    b.Property<DateTime>("PlannedAuditStartDate");

                    b.HasKey("AuditId");

                    b.HasIndex("AuditTypeId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("codeapp.API.Models.AuditType", b =>
                {
                    b.Property<int>("AuditTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditTypeName");

                    b.HasKey("AuditTypeId");

                    b.ToTable("AuditTypes");
                });

            modelBuilder.Entity("codeapp.API.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AnnualRevenue");

                    b.Property<string>("City");

                    b.Property<string>("CompanyStart");

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CustomerName");

                    b.Property<string>("Email");

                    b.Property<string>("Notes");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("Product");

                    b.Property<bool>("Union");

                    b.Property<string>("Website");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("codeapp.API.Models.CustomerDivision", b =>
                {
                    b.Property<int>("CustomerDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerDivisionName");

                    b.HasKey("CustomerDivisionId");

                    b.ToTable("CustomerDivisions");
                });

            modelBuilder.Entity("codeapp.API.Models.Disposition", b =>
                {
                    b.Property<int>("DispositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DispositionName");

                    b.HasKey("DispositionId");

                    b.ToTable("Dispositions");
                });

            modelBuilder.Entity("codeapp.API.Models.Finding", b =>
                {
                    b.Property<int>("FindingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuditId")
                        .IsRequired();

                    b.Property<string>("Auditor");

                    b.Property<string>("FindingDetails");

                    b.Property<int>("FindingTypeId");

                    b.Property<string>("IsoClauseProcess");

                    b.Property<string>("Notes");

                    b.HasKey("FindingId");

                    b.HasIndex("AuditId");

                    b.HasIndex("FindingTypeId");

                    b.ToTable("Findings");
                });

            modelBuilder.Entity("codeapp.API.Models.FindingType", b =>
                {
                    b.Property<int>("FindingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FindingTypeName");

                    b.HasKey("FindingTypeId");

                    b.ToTable("FindingTypes");
                });

            modelBuilder.Entity("codeapp.API.Models.Like", b =>
                {
                    b.Property<int>("LikerId");

                    b.Property<int>("LikeeId");

                    b.HasKey("LikerId", "LikeeId");

                    b.HasIndex("LikeeId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("codeapp.API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateRead");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("MessageSent");

                    b.Property<bool>("RecipientDeleted");

                    b.Property<int>("RecipientId");

                    b.Property<bool>("SenderDeleted");

                    b.Property<int>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("codeapp.API.Models.MlsDivision", b =>
                {
                    b.Property<int>("MlsDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MlsDivisionName");

                    b.HasKey("MlsDivisionId");

                    b.ToTable("MlsDivision");
                });

            modelBuilder.Entity("codeapp.API.Models.Ncr", b =>
                {
                    b.Property<int>("NcrId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompletionDate");

                    b.Property<int>("CustomerDivisionId");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("DefectCode");

                    b.Property<string>("DefectDescription");

                    b.Property<string>("DispositionBy");

                    b.Property<DateTime>("DispositionDate");

                    b.Property<int>("DispositionId");

                    b.Property<int>("MlsDivisionId");

                    b.Property<string>("NcrNo");

                    b.Property<int>("NcrStatusId");

                    b.Property<int>("NcrTypeId");

                    b.Property<string>("Notes");

                    b.Property<string>("PartCost");

                    b.Property<string>("PartDescription");

                    b.Property<string>("PartNumber");

                    b.Property<int>("Quantity");

                    b.Property<string>("ReworkCompletedBy");

                    b.Property<string>("ReworkHrs");

                    b.Property<string>("ReworkNo");

                    b.Property<string>("ReworkNotes");

                    b.Property<string>("ReworkPartsScrapped");

                    b.Property<string>("ReworkPartsUsed");

                    b.Property<int>("ReworkQty");

                    b.Property<string>("ReworkStatus");

                    b.Property<string>("ScarpApprovedBy");

                    b.Property<string>("ScarppedBy");

                    b.Property<DateTime>("ScrapApprovalDate");

                    b.Property<DateTime>("ScrapDate");

                    b.Property<string>("ScrapNo");

                    b.Property<string>("ScrapNotes");

                    b.Property<int>("ScrapQty");

                    b.Property<string>("ScrapStatus");

                    b.Property<string>("SerialNumber");

                    b.Property<int>("SupplierId");

                    b.HasKey("NcrId");

                    b.HasIndex("CustomerDivisionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DispositionId");

                    b.HasIndex("MlsDivisionId");

                    b.HasIndex("NcrStatusId");

                    b.HasIndex("NcrTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Ncrs");
                });

            modelBuilder.Entity("codeapp.API.Models.NcrStatus", b =>
                {
                    b.Property<int>("NcrStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NcrStatusName");

                    b.HasKey("NcrStatusId");

                    b.ToTable("NcrStatuses");
                });

            modelBuilder.Entity("codeapp.API.Models.NcrType", b =>
                {
                    b.Property<int>("NcrTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NcrTypeName");

                    b.HasKey("NcrTypeId");

                    b.ToTable("NcrTypes");
                });

            modelBuilder.Entity("codeapp.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("codeapp.API.Models.PhotoAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AuditId");

                    b.ToTable("PhotoAudits");
                });

            modelBuilder.Entity("codeapp.API.Models.Responsible", b =>
                {
                    b.Property<int>("ResponsibleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeName");

                    b.Property<string>("EmployeeTitle");

                    b.Property<string>("Notes");

                    b.HasKey("ResponsibleId");

                    b.ToTable("Responsibles");
                });

            modelBuilder.Entity("codeapp.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("codeapp.API.Models.Scrum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<DateTime>("CompletionDate");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("Notes");

                    b.Property<int>("ResponsibleId");

                    b.Property<int>("ScrumStatausId");

                    b.Property<int?>("ScrumStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("ScrumStatusId");

                    b.ToTable("Scrums");
                });

            modelBuilder.Entity("codeapp.API.Models.ScrumStatus", b =>
                {
                    b.Property<int>("ScrumStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ScrumStatusName");

                    b.HasKey("ScrumStatusId");

                    b.ToTable("ScrumStatuses");
                });

            modelBuilder.Entity("codeapp.API.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AnnualRev");

                    b.Property<string>("Category");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("DetailCategory");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("Notes");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("SubCategory");

                    b.Property<string>("SupplierName");

                    b.Property<string>("SupplierNo");

                    b.Property<string>("SupplierType");

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("codeapp.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Gender");

                    b.Property<string>("Interests");

                    b.Property<string>("Introduction");

                    b.Property<string>("KnownAs");

                    b.Property<DateTime>("LastActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("LookingFor");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("codeapp.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("codeapp.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("codeapp.API.Models.Audit", b =>
                {
                    b.HasOne("codeapp.API.Models.AuditType", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("codeapp.API.Models.Finding", b =>
                {
                    b.HasOne("codeapp.API.Models.Audit", "Audit")
                        .WithMany("Findings")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("codeapp.API.Models.FindingType", "FindingType")
                        .WithMany()
                        .HasForeignKey("FindingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("codeapp.API.Models.Like", b =>
                {
                    b.HasOne("codeapp.API.Models.User", "Likee")
                        .WithMany("Likers")
                        .HasForeignKey("LikeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("codeapp.API.Models.User", "Liker")
                        .WithMany("Likees")
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("codeapp.API.Models.Message", b =>
                {
                    b.HasOne("codeapp.API.Models.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("codeapp.API.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("codeapp.API.Models.Ncr", b =>
                {
                    b.HasOne("codeapp.API.Models.CustomerDivision", "CustomerDivision")
                        .WithMany()
                        .HasForeignKey("CustomerDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.Disposition", "Disposition")
                        .WithMany()
                        .HasForeignKey("DispositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.MlsDivision", "MlsDivision")
                        .WithMany()
                        .HasForeignKey("MlsDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.NcrStatus", "NcrStatus")
                        .WithMany()
                        .HasForeignKey("NcrStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.NcrType", "NcrType")
                        .WithMany()
                        .HasForeignKey("NcrTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("codeapp.API.Models.Photo", b =>
                {
                    b.HasOne("codeapp.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("codeapp.API.Models.PhotoAudit", b =>
                {
                    b.HasOne("codeapp.API.Models.Audit", "Audit")
                        .WithMany("PhotoAudits")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("codeapp.API.Models.Scrum", b =>
                {
                    b.HasOne("codeapp.API.Models.Responsible", "Responsible")
                        .WithMany("Scrums")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.ScrumStatus", "ScrumStatus")
                        .WithMany()
                        .HasForeignKey("ScrumStatusId");
                });

            modelBuilder.Entity("codeapp.API.Models.UserRole", b =>
                {
                    b.HasOne("codeapp.API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("codeapp.API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("codeapp.API.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("codeapp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("codeapp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("codeapp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
